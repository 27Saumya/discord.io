import asyncio
from typing import Any, Callable, Coroutine, List, Optional, TypeVar, Union

Snowflake = Union[str, int]
SnowflakeList = List[Snowflake]
T = TypeVar('T')
Coro = Coroutine[Any, Any, T]
CoroFunc = Callable[..., Coro[Any]]
CFT = TypeVar('CFT', bound='CoroFunc')

class Client:
    loop: Any
    http: Any
    def __init__(self, loop: Optional[asyncio.AbstractEventLoop] = ...) -> None: ...
    def on_error(self, e_meth: str, *args: Any, **kwargs: Any) -> None: ...
    def event(self, event: str, *args: Any, **kwargs: Any): ...
    async def command(self) -> Callable[[CFT], CFT]: ...
    token: Any
    async def login(self, token: str): ...
    async def logout(self) -> None: ...
    async def ws_start(self) -> None: ...
    async def start(self, token: str, auto_reconnect: bool = ...) -> None: ...
    def listen(self, coro: Coro) -> Coro: ...
